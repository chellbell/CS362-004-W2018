TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
TESTING adventurer functionality:
test #1 failed
test #2 failed
test #3 passed
test #4 passed
File 'dominion.c'
Lines executed:26.82% of 645
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     5302:    9:  if (*(int*)a > *(int*)b)
     1252:   10:    return 1;
     4050:   11:  if (*(int*)a < *(int*)b)
     1840:   12:    return -1;
     2210:   13:  return 0;
     5302:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;                       
        -:   43:  //set up random number generator
      102:   44:  SelectStream(1);
      102:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      204:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      102:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2244:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    22440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    19380:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:              return -1;
        -:   64:            }
    10200:   65:        }
     1020:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      102:   73:  if (numPlayers == 2)
        -:   74:    {
      102:   75:      state->supplyCount[curse] = 10;
      102:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      102:   87:  if (numPlayers == 2)
        -:   88:    {
      102:   89:      state->supplyCount[estate] = 8;
      102:   90:      state->supplyCount[duchy] = 8;
      102:   91:      state->supplyCount[province] = 8;
      102:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      102:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      102:  102:  state->supplyCount[silver] = 40;
      102:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     4284:  106:  for (i = adventurer; i <= treasure_map; i++)          //loop all cards
        -:  107:    {
    33660:  108:      for (j = 0; j < 10; j++)                          //loop chosen cards
        -:  109:        {
    15810:  110:          if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:              //check if card is a 'Victory' Kingdom card
     1938:  113:              if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
      204:  115:                  if (numPlayers == 2){ 
      204:  116:                    state->supplyCount[i] = 8; 
      204:  117:                  }
    #####:  118:                  else{ state->supplyCount[i] = 12; }
      204:  119:                }
        -:  120:              else
        -:  121:                {
      816:  122:                  state->supplyCount[i] = 10;
        -:  123:                }
     1020:  124:              break;
        -:  125:            }
        -:  126:          else    //card is not in the set choosen for the game
        -:  127:            {
    14790:  128:              state->supplyCount[i] = -1;
        -:  129:            }
    14790:  130:        }
        -:  131:
     2040:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      612:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      204:  140:      state->deckCount[i] = 0;
     1632:  141:      for (j = 0; j < 3; j++)
        -:  142:        {
      612:  143:          state->deck[i][j] = estate;
      612:  144:          state->deckCount[i]++;
      612:  145:        }
     3264:  146:      for (j = 3; j < 10; j++)
        -:  147:        {
     1428:  148:          state->deck[i][j] = copper;
     1428:  149:          state->deckCount[i]++;                
     1428:  150:        }
      204:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      612:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      204:  156:      if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:          return -1;
        -:  159:        }
      204:  160:    }
        -:  161:
        -:  162:  //draw player hands
      612:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      204:  166:      state->handCount[i] = 0;
      204:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //        {
        -:  171:      //          drawCard(i, state);
        -:  172:      //        }
      204:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     5712:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2754:  178:      state->embargoTokens[i] = 0;
     2754:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      102:  182:  state->outpostPlayed = 0;
      102:  183:  state->phase = 0;
      102:  184:  state->numActions = 1;
      102:  185:  state->numBuys = 1;
      102:  186:  state->playedCardCount = 0;
      102:  187:  state->whoseTurn = 0;
      102:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1224:  192:  for (it = 0; it < 5; it++){
      510:  193:    drawCard(state->whoseTurn, state);
      510:  194:  }
        -:  195:
      102:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      102:  198:  return 0;
      102:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      206:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      206:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      206:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5680:  214:  while (state->deckCount[player] > 0) {
     2634:  215:    card = floor(Random() * state->deckCount[player]);
     2634:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2634:  217:    newDeckPos++;
   103556:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    49144:  219:      state->deck[player][i] = state->deck[player][i+1];
    49144:  220:    }
     2634:  221:    state->deckCount[player]--;
        -:  222:  }
     5680:  223:  for (i = 0; i < newDeckPos; i++) {
     2634:  224:    state->deck[player][i] = newDeck[i];
     2634:  225:    state->deckCount[player]++;
     2634:  226:  }
        -:  227:
      206:  228:  return 0;
      206:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{       
        -:  233:  int card;
      300:  234:  int coin_bonus = 0;           //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      300:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:        
        -:  242:  //check if player has enough actions
      300:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:        
        -:  248:  //get card played
      300:  249:  card = handCard(handPos, state);
        -:  250:        
        -:  251:  //check if selected card is an action
      600:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:        
        -:  257:  //play card
      300:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:        
        -:  263:  //reduce number of actions
      300:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      300:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:        
      300:  269:  return 0;
      300:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
      300:  316:  int currentPlayer = whoseTurn(state);
      300:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
      600:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:        
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:          j++;
    #####:  407:        }
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;        
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:          players[i] = -9999;
    #####:  470:        }
        -:  471:      else
        -:  472:        {
    #####:  473:          players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:        {
    #####:  483:          j = i;
    #####:  484:        }
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:          players[i]++;
    #####:  495:        }
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:          j = i;
    #####:  505:        }
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:        {
    #####:  514:          players[i] = 1;
    #####:  515:        }
        -:  516:      else
        -:  517:        {
    #####:  518:          players[i] = 0;
        -:  519:        }
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{       int count;
        -:  527:  int deckCounter;
      910:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1192:  533:    for (i = 0; i < state->discardCount[player];i++){
      594:  534:      state->deck[player][i] = state->discard[player][i];
      594:  535:      state->discard[player][i] = -1;
      594:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        2:  565:  }
        -:  566:
        -:  567:  else{
      908:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      908:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      908:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      908:  576:    state->deckCount[player]--;
      908:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      910:  580:  return 0;
      910:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:        
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      300:  653:  int currentPlayer = whoseTurn(state);
      300:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:  
        -:  656:  int temphand[MAX_HAND];
      300:  657:  int tributeRevealedCards[2] = {-1, -1};
      300:  658:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  659:    nextPlayer = 0;
    #####:  660:  }
        -:  661:  
        -:  662:        
        -:  663:  //uses switch to select card and perform actions
      300:  664:  switch( card ) 
        -:  665:    {
        -:  666:    case adventurer:
      100:  667:      return playAdventurer(state, currentPlayer);
        -:  668:                        
        -:  669:    case council_room:             
    #####:  670:      return playCouncilRoom(state, currentPlayer, handPos);
        -:  671:                        
        -:  672:    case feast:
        -:  673:      //gain card with cost up to 5
        -:  674:      //Backup hand
    #####:  675:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  676:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  677:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  678:      }
        -:  679:      //Backup hand
        -:  680:
        -:  681:      //Update Coins for Buy
    #####:  682:      updateCoins(currentPlayer, state, 5);
    #####:  683:      x = 1;//Condition to loop on
    #####:  684:      while( x == 1) {//Buy one card
    #####:  685:        if (supplyCount(choice1, state) <= 0){
        -:  686:          if (DEBUG)
        -:  687:            printf("None of that card left, sorry!\n");
        -:  688:
        -:  689:          if (DEBUG){
        -:  690:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  691:          }
    #####:  692:        }
    #####:  693:        else if (state->coins < getCost(choice1)){
    #####:  694:          printf("That card is too expensive!\n");
        -:  695:
        -:  696:          if (DEBUG){
        -:  697:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  698:          }
    #####:  699:        }
        -:  700:        else{
        -:  701:
        -:  702:          if (DEBUG){
        -:  703:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  704:          }
        -:  705:
    #####:  706:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  707:          x = 0;//No more buying cards
        -:  708:
        -:  709:          if (DEBUG){
        -:  710:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:          }
        -:  712:
        -:  713:        }
        -:  714:      }     
        -:  715:
        -:  716:      //Reset Hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:        state->hand[currentPlayer][i] = temphand[i];
    #####:  719:        temphand[i] = -1;
    #####:  720:      }
        -:  721:      //Reset Hand
        -:  722:                        
    #####:  723:      return 0;
        -:  724:                        
        -:  725:    case gardens:
    #####:  726:      return -1;
        -:  727:                        
        -:  728:    case mine:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  732:        {
    #####:  733:          return -1;
        -:  734:        }
        -:  735:                
    #####:  736:      if (choice2 > treasure_map || choice2 < curse)
        -:  737:        {
    #####:  738:          return -1;
        -:  739:        }
        -:  740:
    #####:  741:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  742:        {
    #####:  743:          return -1;
        -:  744:        }
        -:  745:
    #####:  746:      gainCard(choice2, state, 2, currentPlayer);
        -:  747:
        -:  748:      //discard card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
        -:  750:
        -:  751:      //discard trashed card
    #####:  752:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  753:        {
    #####:  754:          if (state->hand[currentPlayer][i] == j)
        -:  755:            {
    #####:  756:              discardCard(i, currentPlayer, state, 0);                  
    #####:  757:              break;
        -:  758:            }
    #####:  759:        }
        -:  760:                        
    #####:  761:      return 0;
        -:  762:                        
        -:  763:    case remodel:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  767:        {
    #####:  768:          return -1;
        -:  769:        }
        -:  770:
    #####:  771:      gainCard(choice2, state, 0, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:        {
    #####:  779:          if (state->hand[currentPlayer][i] == j)
        -:  780:            {
    #####:  781:              discardCard(i, currentPlayer, state, 0);                  
    #####:  782:              break;
        -:  783:            }
    #####:  784:        }
        -:  785:
        -:  786:
    #####:  787:      return 0;
        -:  788:                
        -:  789:    case smithy:
    #####:  790:      return playSmithy(state, currentPlayer, handPos);
        -:  791:                
        -:  792:    case village:
        -:  793:      //+1 Card
      100:  794:      drawCard(currentPlayer, state);
        -:  795:                        
        -:  796:      //+2 Actions
      100:  797:      state->numActions = state->numActions + 2;
        -:  798:                        
        -:  799:      //discard played card from hand
      100:  800:      discardCard(handPos, currentPlayer, state, 0);
      100:  801:      return 0;
        -:  802:                
        -:  803:    case baron:
    #####:  804:      state->numBuys++;//Increase buys by 1!
    #####:  805:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  806:        int p = 0;//Iterator for hand!
    #####:  807:        int card_not_discarded = 1;//Flag for discard set!
    #####:  808:        while(card_not_discarded){
    #####:  809:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  810:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  811:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  812:            state->discardCount[currentPlayer]++;
    #####:  813:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  814:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  815:            }
    #####:  816:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  817:            state->handCount[currentPlayer]--;
    #####:  818:            card_not_discarded = 0;//Exit the loop
    #####:  819:          }
    #####:  820:          else if (p > state->handCount[currentPlayer]){
        -:  821:            if(DEBUG) {
        -:  822:              printf("No estate cards in your hand, invalid choice\n");
        -:  823:              printf("Must gain an estate if there are any\n");
        -:  824:            }
    #####:  825:            if (supplyCount(estate, state) > 0){
    #####:  826:              gainCard(estate, state, 0, currentPlayer);
    #####:  827:              state->supplyCount[estate]--;//Decrement estates
    #####:  828:              if (supplyCount(estate, state) == 0){
    #####:  829:                isGameOver(state);
    #####:  830:              }
    #####:  831:            }
    #####:  832:            card_not_discarded = 0;//Exit the loop
    #####:  833:          }
        -:  834:                            
        -:  835:          else{
    #####:  836:            p++;//Next card
        -:  837:          }
        -:  838:        }
    #####:  839:      }
        -:  840:                            
        -:  841:      else{
    #####:  842:        if (supplyCount(estate, state) > 0){
    #####:  843:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  844:          state->supplyCount[estate]--;//Decrement Estates
    #####:  845:          if (supplyCount(estate, state) == 0){
    #####:  846:            isGameOver(state);
    #####:  847:          }
    #####:  848:        }
        -:  849:      }
        -:  850:            
        -:  851:      
    #####:  852:      return 0;
        -:  853:                
        -:  854:    case great_hall:
      100:  855:      return playGreatHall(state, currentPlayer, handPos);
        -:  856:                
        -:  857:    case minion:
        -:  858:      //+1 action
    #####:  859:      state->numActions++;
        -:  860:                        
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:                        
    #####:  864:      if (choice1)              //+2 coins
        -:  865:        {
    #####:  866:          state->coins = state->coins + 2;
    #####:  867:        }
        -:  868:                        
    #####:  869:      else if (choice2)         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  870:        {
        -:  871:          //discard hand
    #####:  872:          while(numHandCards(state) > 0)
        -:  873:            {
    #####:  874:              discardCard(handPos, currentPlayer, state, 0);
        -:  875:            }
        -:  876:                                
        -:  877:          //draw 4
    #####:  878:          for (i = 0; i < 4; i++)
        -:  879:            {
    #####:  880:              drawCard(currentPlayer, state);
    #####:  881:            }
        -:  882:                                
        -:  883:          //other players discard hand and redraw if hand size > 4
    #####:  884:          for (i = 0; i < state->numPlayers; i++)
        -:  885:            {
    #####:  886:              if (i != currentPlayer)
        -:  887:                {
    #####:  888:                  if ( state->handCount[i] > 4 )
        -:  889:                    {
        -:  890:                      //discard hand
    #####:  891:                      while( state->handCount[i] > 0 )
        -:  892:                        {
    #####:  893:                          discardCard(handPos, i, state, 0);
        -:  894:                        }
        -:  895:                                                        
        -:  896:                      //draw 4
    #####:  897:                      for (j = 0; j < 4; j++)
        -:  898:                        {
    #####:  899:                          drawCard(i, state);
    #####:  900:                        }
    #####:  901:                    }
    #####:  902:                }
    #####:  903:            }
        -:  904:                                
    #####:  905:        }
    #####:  906:      return 0;
        -:  907:                
        -:  908:    case steward:
    #####:  909:      if (choice1 == 1)
        -:  910:        {
        -:  911:          //+2 cards
    #####:  912:          drawCard(currentPlayer, state);
    #####:  913:          drawCard(currentPlayer, state);
    #####:  914:        }
    #####:  915:      else if (choice1 == 2)
        -:  916:        {
        -:  917:          //+2 coins
    #####:  918:          state->coins = state->coins + 2;
    #####:  919:        }
        -:  920:      else
        -:  921:        {
        -:  922:          //trash 2 cards in hand
    #####:  923:          discardCard(choice2, currentPlayer, state, 1);
    #####:  924:          discardCard(choice3, currentPlayer, state, 1);
        -:  925:        }
        -:  926:                        
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
    #####:  929:      return 0;
        -:  930:                
        -:  931:    case tribute:
    #####:  932:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  933:        if (state->deckCount[nextPlayer] > 0){
    #####:  934:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:          state->deckCount[nextPlayer]--;
    #####:  936:        }
    #####:  937:        else if (state->discardCount[nextPlayer] > 0){
    #####:  938:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  939:          state->discardCount[nextPlayer]--;
    #####:  940:        }
        -:  941:        else{
        -:  942:          //No Card to Reveal
        -:  943:          if (DEBUG){
        -:  944:            printf("No cards to reveal\n");
        -:  945:          }
        -:  946:        }
    #####:  947:      }
        -:  948:            
        -:  949:      else{
    #####:  950:        if (state->deckCount[nextPlayer] == 0){
    #####:  951:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  952:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  953:            state->deckCount[nextPlayer]++;
    #####:  954:            state->discard[nextPlayer][i] = -1;
    #####:  955:            state->discardCount[nextPlayer]--;
    #####:  956:          }
        -:  957:                            
    #####:  958:          shuffle(nextPlayer,state);//Shuffle the deck
    #####:  959:        } 
    #####:  960:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  962:        state->deckCount[nextPlayer]--;
    #####:  963:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:        state->deckCount[nextPlayer]--;
        -:  966:      }    
        -:  967:                       
    #####:  968:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  969:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  970:        state->playedCardCount++;
    #####:  971:        tributeRevealedCards[1] = -1;
    #####:  972:      }
        -:  973:
    #####:  974:      for (i = 0; i <= 2; i ++){
    #####:  975:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  976:          state->coins += 2;
    #####:  977:        }
        -:  978:                    
    #####:  979:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  980:          drawCard(currentPlayer, state);
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:        else{//Action Card
    #####:  984:          state->numActions = state->numActions + 2;
        -:  985:        }
    #####:  986:      }
        -:  987:            
    #####:  988:      return 0;
        -:  989:                
        -:  990:    case ambassador:
    #####:  991:      j = 0;            //used to check if player has enough cards to discard
        -:  992:
    #####:  993:      if (choice2 > 2 || choice2 < 0)
        -:  994:        {
    #####:  995:          return -1;                            
        -:  996:        }
        -:  997:
    #####:  998:      if (choice1 == handPos)
        -:  999:        {
    #####: 1000:          return -1;
        -: 1001:        }
        -: 1002:
    #####: 1003:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1004:        {
    #####: 1005:          if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1006:            {
    #####: 1007:              j++;
    #####: 1008:            }
    #####: 1009:        }
    #####: 1010:      if (j < choice2)
        -: 1011:        {
    #####: 1012:          return -1;                            
        -: 1013:        }
        -: 1014:
        -: 1015:      if (DEBUG) 
        -: 1016:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1017:
        -: 1018:      //increase supply count for choosen card by amount being discarded
    #####: 1019:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1020:                        
        -: 1021:      //each other player gains a copy of revealed card
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
        -: 1023:        {
    #####: 1024:          if (i != currentPlayer)
        -: 1025:            {
    #####: 1026:              gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1027:            }
    #####: 1028:        }
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);                    
        -: 1032:
        -: 1033:      //trash copies of cards returned to supply
    #####: 1034:      for (j = 0; j < choice2; j++)
        -: 1035:        {
    #####: 1036:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1037:            {
    #####: 1038:              if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1039:                {
    #####: 1040:                  discardCard(i, currentPlayer, state, 1);
    #####: 1041:                  break;
        -: 1042:                }
    #####: 1043:            }
    #####: 1044:        }                       
        -: 1045:
    #####: 1046:      return 0;
        -: 1047:                
        -: 1048:    case cutpurse:
        -: 1049:
    #####: 1050:      updateCoins(currentPlayer, state, 2);
    #####: 1051:      for (i = 0; i < state->numPlayers; i++)
        -: 1052:        {
    #####: 1053:          if (i != currentPlayer)
        -: 1054:            {
    #####: 1055:              for (j = 0; j < state->handCount[i]; j++)
        -: 1056:                {
    #####: 1057:                  if (state->hand[i][j] == copper)
        -: 1058:                    {
    #####: 1059:                      discardCard(j, i, state, 0);
    #####: 1060:                      break;
        -: 1061:                    }
    #####: 1062:                  if (j == state->handCount[i])
        -: 1063:                    {
    #####: 1064:                      for (k = 0; k < state->handCount[i]; k++)
        -: 1065:                        {
        -: 1066:                          if (DEBUG)
        -: 1067:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1068:                        }       
    #####: 1069:                      break;
        -: 1070:                    }           
    #####: 1071:                }
        -: 1072:                                        
    #####: 1073:            }
        -: 1074:                                
    #####: 1075:        }                               
        -: 1076:
        -: 1077:      //discard played card from hand
    #####: 1078:      discardCard(handPos, currentPlayer, state, 0);                    
        -: 1079:
    #####: 1080:      return 0;
        -: 1081:
        -: 1082:                
        -: 1083:    case embargo: 
        -: 1084:      //+2 Coins
    #####: 1085:      state->coins = state->coins + 2;
        -: 1086:                        
        -: 1087:      //see if selected pile is in play
    #####: 1088:      if ( state->supplyCount[choice1] == -1 )
        -: 1089:        {
    #####: 1090:          return -1;
        -: 1091:        }
        -: 1092:                        
        -: 1093:      //add embargo token to selected supply pile
    #####: 1094:      state->embargoTokens[choice1]++;
        -: 1095:                        
        -: 1096:      //trash card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 1);            
    #####: 1098:      return 0;
        -: 1099:                
        -: 1100:    case outpost:
        -: 1101:      //set outpost flag
    #####: 1102:      state->outpostPlayed++;
        -: 1103:                        
        -: 1104:      //discard card
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:      return 0;
        -: 1107:                
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:                        
    #####: 1112:      if (choice1)
        -: 1113:        {
        -: 1114:          //gain coins equal to trashed card
    #####: 1115:          state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:          //trash card
    #####: 1117:          discardCard(choice1, currentPlayer, state, 1);        
    #####: 1118:        }
        -: 1119:                        
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:                
        -: 1124:    case sea_hag:
    #####: 1125:      return playSeaHag(state, currentPlayer);
        -: 1126:                
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:        {
    #####: 1132:          if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:            {
    #####: 1134:              index = i;
    #####: 1135:              break;
        -: 1136:            }
    #####: 1137:        }
    #####: 1138:      if (index > -1)
        -: 1139:        {
        -: 1140:          //trash both treasure cards
    #####: 1141:          discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:          discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:          //gain 4 Gold cards
    #####: 1145:          for (i = 0; i < 4; i++)
        -: 1146:            {
    #####: 1147:              gainCard(gold, state, 1, currentPlayer);
    #####: 1148:            }
        -: 1149:                                
        -: 1150:          //return success
    #####: 1151:          return 1;
        -: 1152:        }
        -: 1153:                        
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:        
    #####: 1158:  return -1;
      300: 1159:}
        -: 1160:
        -: 1161:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos) {
        -: 1162:  //+4 Cards
    #####: 1163:  for (int i = 0; i < 4; i++)
        -: 1164:    {
    #####: 1165:      drawCard(currentPlayer, state);
    #####: 1166:    }
        -: 1167:                    
        -: 1168:  //+1 Buy
    #####: 1169:  state->numBuys++;
        -: 1170:                    
        -: 1171:  //Each other player draws a card
    #####: 1172:  for (int i = 0; i < state->numPlayers; i++)
        -: 1173:    {
    #####: 1174:      if ( i != currentPlayer )
        -: 1175:        {
    #####: 1176:          drawCard(i, state);
    #####: 1177:          drawCard(i, state);
    #####: 1178:        }
    #####: 1179:    }
        -: 1180:                    
        -: 1181:  //put played card in played card pile
    #####: 1182:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int playSmithy(struct gameState *state, int currentPlayer, int handPos) {
        -: 1187:  //+3 Cards
    #####: 1188:  for (int i = 0; i < 5; i++)
        -: 1189:    {
    #####: 1190:      drawCard(currentPlayer, state);
    #####: 1191:    }
        -: 1192:                    
        -: 1193:  //discard card from hand
    #####: 1194:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:  return 0;
        -: 1196:}
        -: 1197:
        -: 1198:int playAdventurer(struct gameState *state, int currentPlayer) {
      100: 1199:  int drawnTreasure = 0;
        -: 1200:  int cardDrawn;  
        -: 1201:  int tempHand[MAX_HAND];
      100: 1202:  int z = 0; // a counter for tracking tempHand
        -: 1203:
      600: 1204:  while(drawnTreasure<2){
      200: 1205:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1206:      shuffle(currentPlayer, state);
    #####: 1207:    }
      200: 1208:    drawCard(currentPlayer, state);
      200: 1209:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      200: 1210:    if (cardDrawn == copper || cardDrawn == gold)
      200: 1211:      drawnTreasure++;
        -: 1212:    else{
    #####: 1213:      tempHand[z]=cardDrawn;
    #####: 1214:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1215:      z++;
        -: 1216:    }
        -: 1217:  }
      200: 1218:  while(z-1>=0){
    #####: 1219:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=tempHand[z-1]; // discard all cards in play that have been drawn
    #####: 1220:    z=z-1;
        -: 1221:  }
      100: 1222:  return 0;
        -: 1223:}
        -: 1224:
        -: 1225:int playGreatHall(struct gameState *state, int currentPlayer, int handPos) {
        -: 1226:  //+1 Card
      100: 1227:  drawCard(currentPlayer, state);
        -: 1228:                    
        -: 1229:  //+1 Actions
      100: 1230:  state->numActions++;
        -: 1231:                    
        -: 1232:  //discard card from hand
      100: 1233:  discardCard(handPos, currentPlayer, state, 0);
      100: 1234:  return 0;
        -: 1235:}
        -: 1236:
        -: 1237:int playSeaHag(struct gameState *state, int currentPlayer) {
    #####: 1238:  for (int i = 0; i < state->numPlayers; i++){
    #####: 1239:    if (i == currentPlayer){
    #####: 1240:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                        state->deckCount[i]--;
    #####: 1241:      state->discardCount[i]++;
    #####: 1242:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1243:    }
    #####: 1244:  }
    #####: 1245:}
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:        
        -: 1250:  //if card is not trashed, added to Played pile 
      200: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
      200: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      200: 1255:      state->playedCardCount++;
      200: 1256:    }
        -: 1257:        
        -: 1258:  //set played card to -1
      200: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:        
        -: 1261:  //remove card from player's hand
      200: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) )       //last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
      200: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else  
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
      200: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
      200: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
      200: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:        
      200: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:        
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
    #####: 1292:      return -1;
        -: 1293:    }
        -: 1294:        
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
    #####: 1300:  if (toFlag == 1)
        -: 1301:    {
    #####: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1303:      state->deckCount[player]++;
    #####: 1304:    }
    #####: 1305:  else if (toFlag == 2)
        -: 1306:    {
    #####: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1308:      state->handCount[player]++;
    #####: 1309:    }
        -: 1310:  else
        -: 1311:    {
    #####: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:        
        -: 1316:  //decrease number in supply pile
    #####: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:         
    #####: 1319:  return 0;
    #####: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:        
        -: 1326:  //reset coin count
      402: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
   148106: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
    73651: 1332:      if (state->hand[player][i] == copper)
        -: 1333:        {
    26862: 1334:          state->coins += 1;
    26862: 1335:        }
    46789: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:        {
    #####: 1338:          state->coins += 2;
    #####: 1339:        }
    46789: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:        {
    #####: 1342:          state->coins += 3;
    #####: 1343:        }       
    73651: 1344:    }   
        -: 1345:
        -: 1346:  //add bonus
      402: 1347:  state->coins += bonus;
        -: 1348:
      402: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:
        -: 1353://end of dominion.c
        -: 1354:
